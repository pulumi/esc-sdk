// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the ApprovalRuleEligibilityInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityInput{}

// ApprovalRuleEligibilityInput struct for ApprovalRuleEligibilityInput
type ApprovalRuleEligibilityInput struct {
	EligibilityType *string `json:"eligibilityType,omitempty"`
}

// NewApprovalRuleEligibilityInput instantiates a new ApprovalRuleEligibilityInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityInput() *ApprovalRuleEligibilityInput {
	this := ApprovalRuleEligibilityInput{}
	return &this
}

// NewApprovalRuleEligibilityInputWithDefaults instantiates a new ApprovalRuleEligibilityInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityInputWithDefaults() *ApprovalRuleEligibilityInput {
	this := ApprovalRuleEligibilityInput{}
	return &this
}

// GetEligibilityType returns the EligibilityType field value if set, zero value otherwise.
func (o *ApprovalRuleEligibilityInput) GetEligibilityType() string {
	if o == nil || IsNil(o.EligibilityType) {
		var ret string
		return ret
	}
	return *o.EligibilityType
}

// GetEligibilityTypeOk returns a tuple with the EligibilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityInput) GetEligibilityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EligibilityType) {
		return nil, false
	}
	return o.EligibilityType, true
}

// HasEligibilityType returns a boolean if a field has been set.
func (o *ApprovalRuleEligibilityInput) HasEligibilityType() bool {
	if o != nil && !IsNil(o.EligibilityType) {
		return true
	}

	return false
}

// SetEligibilityType gets a reference to the given string and assigns it to the EligibilityType field.
func (o *ApprovalRuleEligibilityInput) SetEligibilityType(v string) {
	o.EligibilityType = &v
}

func (o ApprovalRuleEligibilityInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EligibilityType) {
		toSerialize["eligibilityType"] = o.EligibilityType
	}
	return toSerialize, nil
}

type NullableApprovalRuleEligibilityInput struct {
	value *ApprovalRuleEligibilityInput
	isSet bool
}

func (v NullableApprovalRuleEligibilityInput) Get() *ApprovalRuleEligibilityInput {
	return v.value
}

func (v *NullableApprovalRuleEligibilityInput) Set(val *ApprovalRuleEligibilityInput) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityInput) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityInput(val *ApprovalRuleEligibilityInput) *NullableApprovalRuleEligibilityInput {
	return &NullableApprovalRuleEligibilityInput{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


