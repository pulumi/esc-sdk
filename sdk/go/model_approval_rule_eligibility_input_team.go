// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApprovalRuleEligibilityInputTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityInputTeam{}

// ApprovalRuleEligibilityInputTeam struct for ApprovalRuleEligibilityInputTeam
type ApprovalRuleEligibilityInputTeam struct {
	ApprovalRuleEligibilityInput
	// Team name for team eligibility condition
	TeamName string `json:"teamName"`
}

type _ApprovalRuleEligibilityInputTeam ApprovalRuleEligibilityInputTeam

// NewApprovalRuleEligibilityInputTeam instantiates a new ApprovalRuleEligibilityInputTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityInputTeam(teamName string) *ApprovalRuleEligibilityInputTeam {
	this := ApprovalRuleEligibilityInputTeam{}
	this.TeamName = teamName
	return &this
}

// NewApprovalRuleEligibilityInputTeamWithDefaults instantiates a new ApprovalRuleEligibilityInputTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityInputTeamWithDefaults() *ApprovalRuleEligibilityInputTeam {
	this := ApprovalRuleEligibilityInputTeam{}
	return &this
}

// GetTeamName returns the TeamName field value
func (o *ApprovalRuleEligibilityInputTeam) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityInputTeam) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *ApprovalRuleEligibilityInputTeam) SetTeamName(v string) {
	o.TeamName = v
}

func (o ApprovalRuleEligibilityInputTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityInputTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedApprovalRuleEligibilityInput, errApprovalRuleEligibilityInput := json.Marshal(o.ApprovalRuleEligibilityInput)
	if errApprovalRuleEligibilityInput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityInput
	}
	errApprovalRuleEligibilityInput = json.Unmarshal([]byte(serializedApprovalRuleEligibilityInput), &toSerialize)
	if errApprovalRuleEligibilityInput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityInput
	}
	toSerialize["teamName"] = o.TeamName
	return toSerialize, nil
}

func (o *ApprovalRuleEligibilityInputTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"teamName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalRuleEligibilityInputTeam := _ApprovalRuleEligibilityInputTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varApprovalRuleEligibilityInputTeam)

	if err != nil {
		return err
	}

	*o = ApprovalRuleEligibilityInputTeam(varApprovalRuleEligibilityInputTeam)

	return err
}

type NullableApprovalRuleEligibilityInputTeam struct {
	value *ApprovalRuleEligibilityInputTeam
	isSet bool
}

func (v NullableApprovalRuleEligibilityInputTeam) Get() *ApprovalRuleEligibilityInputTeam {
	return v.value
}

func (v *NullableApprovalRuleEligibilityInputTeam) Set(val *ApprovalRuleEligibilityInputTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityInputTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityInputTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityInputTeam(val *ApprovalRuleEligibilityInputTeam) *NullableApprovalRuleEligibilityInputTeam {
	return &NullableApprovalRuleEligibilityInputTeam{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityInputTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityInputTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


