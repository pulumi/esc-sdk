// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApprovalRuleEligibilityInputUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityInputUser{}

// ApprovalRuleEligibilityInputUser struct for ApprovalRuleEligibilityInputUser
type ApprovalRuleEligibilityInputUser struct {
	ApprovalRuleEligibilityInput
	// User login for user eligibility condition
	UserLogin string `json:"userLogin"`
}

type _ApprovalRuleEligibilityInputUser ApprovalRuleEligibilityInputUser

// NewApprovalRuleEligibilityInputUser instantiates a new ApprovalRuleEligibilityInputUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityInputUser(userLogin string) *ApprovalRuleEligibilityInputUser {
	this := ApprovalRuleEligibilityInputUser{}
	this.UserLogin = userLogin
	return &this
}

// NewApprovalRuleEligibilityInputUserWithDefaults instantiates a new ApprovalRuleEligibilityInputUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityInputUserWithDefaults() *ApprovalRuleEligibilityInputUser {
	this := ApprovalRuleEligibilityInputUser{}
	return &this
}

// GetUserLogin returns the UserLogin field value
func (o *ApprovalRuleEligibilityInputUser) GetUserLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserLogin
}

// GetUserLoginOk returns a tuple with the UserLogin field value
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityInputUser) GetUserLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserLogin, true
}

// SetUserLogin sets field value
func (o *ApprovalRuleEligibilityInputUser) SetUserLogin(v string) {
	o.UserLogin = v
}

func (o ApprovalRuleEligibilityInputUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityInputUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedApprovalRuleEligibilityInput, errApprovalRuleEligibilityInput := json.Marshal(o.ApprovalRuleEligibilityInput)
	if errApprovalRuleEligibilityInput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityInput
	}
	errApprovalRuleEligibilityInput = json.Unmarshal([]byte(serializedApprovalRuleEligibilityInput), &toSerialize)
	if errApprovalRuleEligibilityInput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityInput
	}
	toSerialize["userLogin"] = o.UserLogin
	return toSerialize, nil
}

func (o *ApprovalRuleEligibilityInputUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userLogin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalRuleEligibilityInputUser := _ApprovalRuleEligibilityInputUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varApprovalRuleEligibilityInputUser)

	if err != nil {
		return err
	}

	*o = ApprovalRuleEligibilityInputUser(varApprovalRuleEligibilityInputUser)

	return err
}

type NullableApprovalRuleEligibilityInputUser struct {
	value *ApprovalRuleEligibilityInputUser
	isSet bool
}

func (v NullableApprovalRuleEligibilityInputUser) Get() *ApprovalRuleEligibilityInputUser {
	return v.value
}

func (v *NullableApprovalRuleEligibilityInputUser) Set(val *ApprovalRuleEligibilityInputUser) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityInputUser) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityInputUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityInputUser(val *ApprovalRuleEligibilityInputUser) *NullableApprovalRuleEligibilityInputUser {
	return &NullableApprovalRuleEligibilityInputUser{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityInputUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityInputUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


