// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApprovalRuleEligibilityOutputPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityOutputPermission{}

// ApprovalRuleEligibilityOutputPermission struct for ApprovalRuleEligibilityOutputPermission
type ApprovalRuleEligibilityOutputPermission struct {
	ApprovalRuleEligibilityOutput
	// Required permission
	Permission string `json:"permission"`
}

type _ApprovalRuleEligibilityOutputPermission ApprovalRuleEligibilityOutputPermission

// NewApprovalRuleEligibilityOutputPermission instantiates a new ApprovalRuleEligibilityOutputPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityOutputPermission(permission string) *ApprovalRuleEligibilityOutputPermission {
	this := ApprovalRuleEligibilityOutputPermission{}
	this.Permission = permission
	return &this
}

// NewApprovalRuleEligibilityOutputPermissionWithDefaults instantiates a new ApprovalRuleEligibilityOutputPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityOutputPermissionWithDefaults() *ApprovalRuleEligibilityOutputPermission {
	this := ApprovalRuleEligibilityOutputPermission{}
	return &this
}

// GetPermission returns the Permission field value
func (o *ApprovalRuleEligibilityOutputPermission) GetPermission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityOutputPermission) GetPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permission, true
}

// SetPermission sets field value
func (o *ApprovalRuleEligibilityOutputPermission) SetPermission(v string) {
	o.Permission = v
}

func (o ApprovalRuleEligibilityOutputPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityOutputPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedApprovalRuleEligibilityOutput, errApprovalRuleEligibilityOutput := json.Marshal(o.ApprovalRuleEligibilityOutput)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	errApprovalRuleEligibilityOutput = json.Unmarshal([]byte(serializedApprovalRuleEligibilityOutput), &toSerialize)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	toSerialize["permission"] = o.Permission
	return toSerialize, nil
}

func (o *ApprovalRuleEligibilityOutputPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permission",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalRuleEligibilityOutputPermission := _ApprovalRuleEligibilityOutputPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varApprovalRuleEligibilityOutputPermission)

	if err != nil {
		return err
	}

	*o = ApprovalRuleEligibilityOutputPermission(varApprovalRuleEligibilityOutputPermission)

	return err
}

type NullableApprovalRuleEligibilityOutputPermission struct {
	value *ApprovalRuleEligibilityOutputPermission
	isSet bool
}

func (v NullableApprovalRuleEligibilityOutputPermission) Get() *ApprovalRuleEligibilityOutputPermission {
	return v.value
}

func (v *NullableApprovalRuleEligibilityOutputPermission) Set(val *ApprovalRuleEligibilityOutputPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityOutputPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityOutputPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityOutputPermission(val *ApprovalRuleEligibilityOutputPermission) *NullableApprovalRuleEligibilityOutputPermission {
	return &NullableApprovalRuleEligibilityOutputPermission{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityOutputPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityOutputPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


