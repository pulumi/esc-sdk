// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApprovalRuleEligibilityOutputTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityOutputTeam{}

// ApprovalRuleEligibilityOutputTeam struct for ApprovalRuleEligibilityOutputTeam
type ApprovalRuleEligibilityOutputTeam struct {
	ApprovalRuleEligibilityOutput
	// Team name
	Name string `json:"name"`
	// Display name
	DisplayName string `json:"displayName"`
}

type _ApprovalRuleEligibilityOutputTeam ApprovalRuleEligibilityOutputTeam

// NewApprovalRuleEligibilityOutputTeam instantiates a new ApprovalRuleEligibilityOutputTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityOutputTeam(name string, displayName string) *ApprovalRuleEligibilityOutputTeam {
	this := ApprovalRuleEligibilityOutputTeam{}
	this.Name = name
	this.DisplayName = displayName
	return &this
}

// NewApprovalRuleEligibilityOutputTeamWithDefaults instantiates a new ApprovalRuleEligibilityOutputTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityOutputTeamWithDefaults() *ApprovalRuleEligibilityOutputTeam {
	this := ApprovalRuleEligibilityOutputTeam{}
	return &this
}

// GetName returns the Name field value
func (o *ApprovalRuleEligibilityOutputTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityOutputTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApprovalRuleEligibilityOutputTeam) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *ApprovalRuleEligibilityOutputTeam) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityOutputTeam) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ApprovalRuleEligibilityOutputTeam) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o ApprovalRuleEligibilityOutputTeam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityOutputTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedApprovalRuleEligibilityOutput, errApprovalRuleEligibilityOutput := json.Marshal(o.ApprovalRuleEligibilityOutput)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	errApprovalRuleEligibilityOutput = json.Unmarshal([]byte(serializedApprovalRuleEligibilityOutput), &toSerialize)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	toSerialize["name"] = o.Name
	toSerialize["displayName"] = o.DisplayName
	return toSerialize, nil
}

func (o *ApprovalRuleEligibilityOutputTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalRuleEligibilityOutputTeam := _ApprovalRuleEligibilityOutputTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varApprovalRuleEligibilityOutputTeam)

	if err != nil {
		return err
	}

	*o = ApprovalRuleEligibilityOutputTeam(varApprovalRuleEligibilityOutputTeam)

	return err
}

type NullableApprovalRuleEligibilityOutputTeam struct {
	value *ApprovalRuleEligibilityOutputTeam
	isSet bool
}

func (v NullableApprovalRuleEligibilityOutputTeam) Get() *ApprovalRuleEligibilityOutputTeam {
	return v.value
}

func (v *NullableApprovalRuleEligibilityOutputTeam) Set(val *ApprovalRuleEligibilityOutputTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityOutputTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityOutputTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityOutputTeam(val *ApprovalRuleEligibilityOutputTeam) *NullableApprovalRuleEligibilityOutputTeam {
	return &NullableApprovalRuleEligibilityOutputTeam{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityOutputTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityOutputTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


