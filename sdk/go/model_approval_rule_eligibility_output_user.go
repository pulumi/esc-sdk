// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the ApprovalRuleEligibilityOutputUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRuleEligibilityOutputUser{}

// ApprovalRuleEligibilityOutputUser struct for ApprovalRuleEligibilityOutputUser
type ApprovalRuleEligibilityOutputUser struct {
	ApprovalRuleEligibilityOutput
	User *UserInfo `json:"user,omitempty"`
}

// NewApprovalRuleEligibilityOutputUser instantiates a new ApprovalRuleEligibilityOutputUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRuleEligibilityOutputUser() *ApprovalRuleEligibilityOutputUser {
	this := ApprovalRuleEligibilityOutputUser{}
	return &this
}

// NewApprovalRuleEligibilityOutputUserWithDefaults instantiates a new ApprovalRuleEligibilityOutputUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRuleEligibilityOutputUserWithDefaults() *ApprovalRuleEligibilityOutputUser {
	this := ApprovalRuleEligibilityOutputUser{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ApprovalRuleEligibilityOutputUser) GetUser() UserInfo {
	if o == nil || IsNil(o.User) {
		var ret UserInfo
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRuleEligibilityOutputUser) GetUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ApprovalRuleEligibilityOutputUser) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserInfo and assigns it to the User field.
func (o *ApprovalRuleEligibilityOutputUser) SetUser(v UserInfo) {
	o.User = &v
}

func (o ApprovalRuleEligibilityOutputUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRuleEligibilityOutputUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedApprovalRuleEligibilityOutput, errApprovalRuleEligibilityOutput := json.Marshal(o.ApprovalRuleEligibilityOutput)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	errApprovalRuleEligibilityOutput = json.Unmarshal([]byte(serializedApprovalRuleEligibilityOutput), &toSerialize)
	if errApprovalRuleEligibilityOutput != nil {
		return map[string]interface{}{}, errApprovalRuleEligibilityOutput
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableApprovalRuleEligibilityOutputUser struct {
	value *ApprovalRuleEligibilityOutputUser
	isSet bool
}

func (v NullableApprovalRuleEligibilityOutputUser) Get() *ApprovalRuleEligibilityOutputUser {
	return v.value
}

func (v *NullableApprovalRuleEligibilityOutputUser) Set(val *ApprovalRuleEligibilityOutputUser) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRuleEligibilityOutputUser) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRuleEligibilityOutputUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRuleEligibilityOutputUser(val *ApprovalRuleEligibilityOutputUser) *NullableApprovalRuleEligibilityOutputUser {
	return &NullableApprovalRuleEligibilityOutputUser{value: val, isSet: true}
}

func (v NullableApprovalRuleEligibilityOutputUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRuleEligibilityOutputUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


