// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeGate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGate{}

// ChangeGate struct for ChangeGate
type ChangeGate struct {
	// Unique identifier of the change gate
	Id string `json:"id"`
	// Name of the change gate
	Name string `json:"name"`
	// Whether the change gate is enabled
	Enabled bool `json:"enabled"`
	Rule ChangeGateRuleOutput `json:"rule"`
	Target ChangeGateTargetOutput `json:"target"`
}

type _ChangeGate ChangeGate

// NewChangeGate instantiates a new ChangeGate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGate(id string, name string, enabled bool, rule ChangeGateRuleOutput, target ChangeGateTargetOutput) *ChangeGate {
	this := ChangeGate{}
	this.Id = id
	this.Name = name
	this.Enabled = enabled
	this.Rule = rule
	this.Target = target
	return &this
}

// NewChangeGateWithDefaults instantiates a new ChangeGate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateWithDefaults() *ChangeGate {
	this := ChangeGate{}
	return &this
}

// GetId returns the Id field value
func (o *ChangeGate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChangeGate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChangeGate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ChangeGate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChangeGate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChangeGate) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *ChangeGate) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ChangeGate) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ChangeGate) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRule returns the Rule field value
func (o *ChangeGate) GetRule() ChangeGateRuleOutput {
	if o == nil {
		var ret ChangeGateRuleOutput
		return ret
	}

	return o.Rule
}

// GetRuleOk returns a tuple with the Rule field value
// and a boolean to check if the value has been set.
func (o *ChangeGate) GetRuleOk() (*ChangeGateRuleOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rule, true
}

// SetRule sets field value
func (o *ChangeGate) SetRule(v ChangeGateRuleOutput) {
	o.Rule = v
}

// GetTarget returns the Target field value
func (o *ChangeGate) GetTarget() ChangeGateTargetOutput {
	if o == nil {
		var ret ChangeGateTargetOutput
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ChangeGate) GetTargetOk() (*ChangeGateTargetOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *ChangeGate) SetTarget(v ChangeGateTargetOutput) {
	o.Target = v
}

func (o ChangeGate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["rule"] = o.Rule
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *ChangeGate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"enabled",
		"rule",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeGate := _ChangeGate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeGate)

	if err != nil {
		return err
	}

	*o = ChangeGate(varChangeGate)

	return err
}

type NullableChangeGate struct {
	value *ChangeGate
	isSet bool
}

func (v NullableChangeGate) Get() *ChangeGate {
	return v.value
}

func (v *NullableChangeGate) Set(val *ChangeGate) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGate) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGate(val *ChangeGate) *NullableChangeGate {
	return &NullableChangeGate{value: val, isSet: true}
}

func (v NullableChangeGate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


