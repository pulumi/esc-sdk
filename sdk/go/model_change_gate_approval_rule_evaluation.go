// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the ChangeGateApprovalRuleEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateApprovalRuleEvaluation{}

// ChangeGateApprovalRuleEvaluation struct for ChangeGateApprovalRuleEvaluation
type ChangeGateApprovalRuleEvaluation struct {
	ChangeGateRuleEvaluation
	// Number of approvals required for this gate
	RequiredApprovals *int64 `json:"requiredApprovals,omitempty"`
	// List of users who have approved this gate
	Approvers []UserInfo `json:"approvers,omitempty"`
}

// NewChangeGateApprovalRuleEvaluation instantiates a new ChangeGateApprovalRuleEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateApprovalRuleEvaluation() *ChangeGateApprovalRuleEvaluation {
	this := ChangeGateApprovalRuleEvaluation{}
	return &this
}

// NewChangeGateApprovalRuleEvaluationWithDefaults instantiates a new ChangeGateApprovalRuleEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateApprovalRuleEvaluationWithDefaults() *ChangeGateApprovalRuleEvaluation {
	this := ChangeGateApprovalRuleEvaluation{}
	return &this
}

// GetRequiredApprovals returns the RequiredApprovals field value if set, zero value otherwise.
func (o *ChangeGateApprovalRuleEvaluation) GetRequiredApprovals() int64 {
	if o == nil || IsNil(o.RequiredApprovals) {
		var ret int64
		return ret
	}
	return *o.RequiredApprovals
}

// GetRequiredApprovalsOk returns a tuple with the RequiredApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleEvaluation) GetRequiredApprovalsOk() (*int64, bool) {
	if o == nil || IsNil(o.RequiredApprovals) {
		return nil, false
	}
	return o.RequiredApprovals, true
}

// HasRequiredApprovals returns a boolean if a field has been set.
func (o *ChangeGateApprovalRuleEvaluation) HasRequiredApprovals() bool {
	if o != nil && !IsNil(o.RequiredApprovals) {
		return true
	}

	return false
}

// SetRequiredApprovals gets a reference to the given int64 and assigns it to the RequiredApprovals field.
func (o *ChangeGateApprovalRuleEvaluation) SetRequiredApprovals(v int64) {
	o.RequiredApprovals = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *ChangeGateApprovalRuleEvaluation) GetApprovers() []UserInfo {
	if o == nil || IsNil(o.Approvers) {
		var ret []UserInfo
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleEvaluation) GetApproversOk() ([]UserInfo, bool) {
	if o == nil || IsNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *ChangeGateApprovalRuleEvaluation) HasApprovers() bool {
	if o != nil && !IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []UserInfo and assigns it to the Approvers field.
func (o *ChangeGateApprovalRuleEvaluation) SetApprovers(v []UserInfo) {
	o.Approvers = v
}

func (o ChangeGateApprovalRuleEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateApprovalRuleEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedChangeGateRuleEvaluation, errChangeGateRuleEvaluation := json.Marshal(o.ChangeGateRuleEvaluation)
	if errChangeGateRuleEvaluation != nil {
		return map[string]interface{}{}, errChangeGateRuleEvaluation
	}
	errChangeGateRuleEvaluation = json.Unmarshal([]byte(serializedChangeGateRuleEvaluation), &toSerialize)
	if errChangeGateRuleEvaluation != nil {
		return map[string]interface{}{}, errChangeGateRuleEvaluation
	}
	if !IsNil(o.RequiredApprovals) {
		toSerialize["requiredApprovals"] = o.RequiredApprovals
	}
	if !IsNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	return toSerialize, nil
}

type NullableChangeGateApprovalRuleEvaluation struct {
	value *ChangeGateApprovalRuleEvaluation
	isSet bool
}

func (v NullableChangeGateApprovalRuleEvaluation) Get() *ChangeGateApprovalRuleEvaluation {
	return v.value
}

func (v *NullableChangeGateApprovalRuleEvaluation) Set(val *ChangeGateApprovalRuleEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateApprovalRuleEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateApprovalRuleEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateApprovalRuleEvaluation(val *ChangeGateApprovalRuleEvaluation) *NullableChangeGateApprovalRuleEvaluation {
	return &NullableChangeGateApprovalRuleEvaluation{value: val, isSet: true}
}

func (v NullableChangeGateApprovalRuleEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateApprovalRuleEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


