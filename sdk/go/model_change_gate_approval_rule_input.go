// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeGateApprovalRuleInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateApprovalRuleInput{}

// ChangeGateApprovalRuleInput struct for ChangeGateApprovalRuleInput
type ChangeGateApprovalRuleInput struct {
	ChangeGateRuleInput
	// Number of approvals required
	NumApprovalsRequired int64 `json:"numApprovalsRequired"`
	// Whether self approval is allowed
	AllowSelfApproval *bool `json:"allowSelfApproval,omitempty"`
	// Whether reapproval is required when the change request is modified
	RequireReapprovalOnChange *bool `json:"requireReapprovalOnChange,omitempty"`
	// List of eligible approvers
	EligibleApprovers []ApprovalRuleEligibilityInput `json:"eligibleApprovers"`
}

type _ChangeGateApprovalRuleInput ChangeGateApprovalRuleInput

// NewChangeGateApprovalRuleInput instantiates a new ChangeGateApprovalRuleInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateApprovalRuleInput(numApprovalsRequired int64, eligibleApprovers []ApprovalRuleEligibilityInput) *ChangeGateApprovalRuleInput {
	this := ChangeGateApprovalRuleInput{}
	this.NumApprovalsRequired = numApprovalsRequired
	this.EligibleApprovers = eligibleApprovers
	return &this
}

// NewChangeGateApprovalRuleInputWithDefaults instantiates a new ChangeGateApprovalRuleInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateApprovalRuleInputWithDefaults() *ChangeGateApprovalRuleInput {
	this := ChangeGateApprovalRuleInput{}
	return &this
}

// GetNumApprovalsRequired returns the NumApprovalsRequired field value
func (o *ChangeGateApprovalRuleInput) GetNumApprovalsRequired() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumApprovalsRequired
}

// GetNumApprovalsRequiredOk returns a tuple with the NumApprovalsRequired field value
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleInput) GetNumApprovalsRequiredOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumApprovalsRequired, true
}

// SetNumApprovalsRequired sets field value
func (o *ChangeGateApprovalRuleInput) SetNumApprovalsRequired(v int64) {
	o.NumApprovalsRequired = v
}

// GetAllowSelfApproval returns the AllowSelfApproval field value if set, zero value otherwise.
func (o *ChangeGateApprovalRuleInput) GetAllowSelfApproval() bool {
	if o == nil || IsNil(o.AllowSelfApproval) {
		var ret bool
		return ret
	}
	return *o.AllowSelfApproval
}

// GetAllowSelfApprovalOk returns a tuple with the AllowSelfApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleInput) GetAllowSelfApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSelfApproval) {
		return nil, false
	}
	return o.AllowSelfApproval, true
}

// HasAllowSelfApproval returns a boolean if a field has been set.
func (o *ChangeGateApprovalRuleInput) HasAllowSelfApproval() bool {
	if o != nil && !IsNil(o.AllowSelfApproval) {
		return true
	}

	return false
}

// SetAllowSelfApproval gets a reference to the given bool and assigns it to the AllowSelfApproval field.
func (o *ChangeGateApprovalRuleInput) SetAllowSelfApproval(v bool) {
	o.AllowSelfApproval = &v
}

// GetRequireReapprovalOnChange returns the RequireReapprovalOnChange field value if set, zero value otherwise.
func (o *ChangeGateApprovalRuleInput) GetRequireReapprovalOnChange() bool {
	if o == nil || IsNil(o.RequireReapprovalOnChange) {
		var ret bool
		return ret
	}
	return *o.RequireReapprovalOnChange
}

// GetRequireReapprovalOnChangeOk returns a tuple with the RequireReapprovalOnChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleInput) GetRequireReapprovalOnChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireReapprovalOnChange) {
		return nil, false
	}
	return o.RequireReapprovalOnChange, true
}

// HasRequireReapprovalOnChange returns a boolean if a field has been set.
func (o *ChangeGateApprovalRuleInput) HasRequireReapprovalOnChange() bool {
	if o != nil && !IsNil(o.RequireReapprovalOnChange) {
		return true
	}

	return false
}

// SetRequireReapprovalOnChange gets a reference to the given bool and assigns it to the RequireReapprovalOnChange field.
func (o *ChangeGateApprovalRuleInput) SetRequireReapprovalOnChange(v bool) {
	o.RequireReapprovalOnChange = &v
}

// GetEligibleApprovers returns the EligibleApprovers field value
func (o *ChangeGateApprovalRuleInput) GetEligibleApprovers() []ApprovalRuleEligibilityInput {
	if o == nil {
		var ret []ApprovalRuleEligibilityInput
		return ret
	}

	return o.EligibleApprovers
}

// GetEligibleApproversOk returns a tuple with the EligibleApprovers field value
// and a boolean to check if the value has been set.
func (o *ChangeGateApprovalRuleInput) GetEligibleApproversOk() ([]ApprovalRuleEligibilityInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.EligibleApprovers, true
}

// SetEligibleApprovers sets field value
func (o *ChangeGateApprovalRuleInput) SetEligibleApprovers(v []ApprovalRuleEligibilityInput) {
	o.EligibleApprovers = v
}

func (o ChangeGateApprovalRuleInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateApprovalRuleInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedChangeGateRuleInput, errChangeGateRuleInput := json.Marshal(o.ChangeGateRuleInput)
	if errChangeGateRuleInput != nil {
		return map[string]interface{}{}, errChangeGateRuleInput
	}
	errChangeGateRuleInput = json.Unmarshal([]byte(serializedChangeGateRuleInput), &toSerialize)
	if errChangeGateRuleInput != nil {
		return map[string]interface{}{}, errChangeGateRuleInput
	}
	toSerialize["numApprovalsRequired"] = o.NumApprovalsRequired
	if !IsNil(o.AllowSelfApproval) {
		toSerialize["allowSelfApproval"] = o.AllowSelfApproval
	}
	if !IsNil(o.RequireReapprovalOnChange) {
		toSerialize["requireReapprovalOnChange"] = o.RequireReapprovalOnChange
	}
	toSerialize["eligibleApprovers"] = o.EligibleApprovers
	return toSerialize, nil
}

func (o *ChangeGateApprovalRuleInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"numApprovalsRequired",
		"eligibleApprovers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeGateApprovalRuleInput := _ChangeGateApprovalRuleInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeGateApprovalRuleInput)

	if err != nil {
		return err
	}

	*o = ChangeGateApprovalRuleInput(varChangeGateApprovalRuleInput)

	return err
}

type NullableChangeGateApprovalRuleInput struct {
	value *ChangeGateApprovalRuleInput
	isSet bool
}

func (v NullableChangeGateApprovalRuleInput) Get() *ChangeGateApprovalRuleInput {
	return v.value
}

func (v *NullableChangeGateApprovalRuleInput) Set(val *ChangeGateApprovalRuleInput) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateApprovalRuleInput) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateApprovalRuleInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateApprovalRuleInput(val *ChangeGateApprovalRuleInput) *NullableChangeGateApprovalRuleInput {
	return &NullableChangeGateApprovalRuleInput{value: val, isSet: true}
}

func (v NullableChangeGateApprovalRuleInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateApprovalRuleInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


