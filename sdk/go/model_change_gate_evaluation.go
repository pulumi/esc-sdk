// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeGateEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateEvaluation{}

// ChangeGateEvaluation struct for ChangeGateEvaluation
type ChangeGateEvaluation struct {
	// The unique identifier of the gate
	Id *string `json:"id,omitempty"`
	// The human-readable name of the gate
	Name *string `json:"name,omitempty"`
	// Indicates whether this gate's requirements have been met
	Satisfied bool `json:"satisfied"`
	RuleDetails *ChangeGateRuleEvaluation `json:"ruleDetails,omitempty"`
}

type _ChangeGateEvaluation ChangeGateEvaluation

// NewChangeGateEvaluation instantiates a new ChangeGateEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateEvaluation(satisfied bool) *ChangeGateEvaluation {
	this := ChangeGateEvaluation{}
	this.Satisfied = satisfied
	return &this
}

// NewChangeGateEvaluationWithDefaults instantiates a new ChangeGateEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateEvaluationWithDefaults() *ChangeGateEvaluation {
	this := ChangeGateEvaluation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChangeGateEvaluation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateEvaluation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChangeGateEvaluation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChangeGateEvaluation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChangeGateEvaluation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateEvaluation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChangeGateEvaluation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChangeGateEvaluation) SetName(v string) {
	o.Name = &v
}

// GetSatisfied returns the Satisfied field value
func (o *ChangeGateEvaluation) GetSatisfied() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Satisfied
}

// GetSatisfiedOk returns a tuple with the Satisfied field value
// and a boolean to check if the value has been set.
func (o *ChangeGateEvaluation) GetSatisfiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Satisfied, true
}

// SetSatisfied sets field value
func (o *ChangeGateEvaluation) SetSatisfied(v bool) {
	o.Satisfied = v
}

// GetRuleDetails returns the RuleDetails field value if set, zero value otherwise.
func (o *ChangeGateEvaluation) GetRuleDetails() ChangeGateRuleEvaluation {
	if o == nil || IsNil(o.RuleDetails) {
		var ret ChangeGateRuleEvaluation
		return ret
	}
	return *o.RuleDetails
}

// GetRuleDetailsOk returns a tuple with the RuleDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateEvaluation) GetRuleDetailsOk() (*ChangeGateRuleEvaluation, bool) {
	if o == nil || IsNil(o.RuleDetails) {
		return nil, false
	}
	return o.RuleDetails, true
}

// HasRuleDetails returns a boolean if a field has been set.
func (o *ChangeGateEvaluation) HasRuleDetails() bool {
	if o != nil && !IsNil(o.RuleDetails) {
		return true
	}

	return false
}

// SetRuleDetails gets a reference to the given ChangeGateRuleEvaluation and assigns it to the RuleDetails field.
func (o *ChangeGateEvaluation) SetRuleDetails(v ChangeGateRuleEvaluation) {
	o.RuleDetails = &v
}

func (o ChangeGateEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["satisfied"] = o.Satisfied
	if !IsNil(o.RuleDetails) {
		toSerialize["ruleDetails"] = o.RuleDetails
	}
	return toSerialize, nil
}

func (o *ChangeGateEvaluation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"satisfied",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeGateEvaluation := _ChangeGateEvaluation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeGateEvaluation)

	if err != nil {
		return err
	}

	*o = ChangeGateEvaluation(varChangeGateEvaluation)

	return err
}

type NullableChangeGateEvaluation struct {
	value *ChangeGateEvaluation
	isSet bool
}

func (v NullableChangeGateEvaluation) Get() *ChangeGateEvaluation {
	return v.value
}

func (v *NullableChangeGateEvaluation) Set(val *ChangeGateEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateEvaluation(val *ChangeGateEvaluation) *NullableChangeGateEvaluation {
	return &NullableChangeGateEvaluation{value: val, isSet: true}
}

func (v NullableChangeGateEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


