// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the ChangeGateRuleInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateRuleInput{}

// ChangeGateRuleInput struct for ChangeGateRuleInput
type ChangeGateRuleInput struct {
	RuleType *string `json:"ruleType,omitempty"`
}

// NewChangeGateRuleInput instantiates a new ChangeGateRuleInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateRuleInput() *ChangeGateRuleInput {
	this := ChangeGateRuleInput{}
	return &this
}

// NewChangeGateRuleInputWithDefaults instantiates a new ChangeGateRuleInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateRuleInputWithDefaults() *ChangeGateRuleInput {
	this := ChangeGateRuleInput{}
	return &this
}

// GetRuleType returns the RuleType field value if set, zero value otherwise.
func (o *ChangeGateRuleInput) GetRuleType() string {
	if o == nil || IsNil(o.RuleType) {
		var ret string
		return ret
	}
	return *o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateRuleInput) GetRuleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RuleType) {
		return nil, false
	}
	return o.RuleType, true
}

// HasRuleType returns a boolean if a field has been set.
func (o *ChangeGateRuleInput) HasRuleType() bool {
	if o != nil && !IsNil(o.RuleType) {
		return true
	}

	return false
}

// SetRuleType gets a reference to the given string and assigns it to the RuleType field.
func (o *ChangeGateRuleInput) SetRuleType(v string) {
	o.RuleType = &v
}

func (o ChangeGateRuleInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateRuleInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleType) {
		toSerialize["ruleType"] = o.RuleType
	}
	return toSerialize, nil
}

type NullableChangeGateRuleInput struct {
	value *ChangeGateRuleInput
	isSet bool
}

func (v NullableChangeGateRuleInput) Get() *ChangeGateRuleInput {
	return v.value
}

func (v *NullableChangeGateRuleInput) Set(val *ChangeGateRuleInput) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateRuleInput) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateRuleInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateRuleInput(val *ChangeGateRuleInput) *NullableChangeGateRuleInput {
	return &NullableChangeGateRuleInput{value: val, isSet: true}
}

func (v NullableChangeGateRuleInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateRuleInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


