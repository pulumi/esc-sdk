// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeGateTargetInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateTargetInput{}

// ChangeGateTargetInput struct for ChangeGateTargetInput
type ChangeGateTargetInput struct {
	// The type of entity this gate applies to
	EntityType *string `json:"entityType,omitempty"`
	// The qualified name of the change gate, i.e. \"my-project/production\" for an environment
	QualifiedName *string `json:"qualifiedName,omitempty"`
	// The action types this gate targets
	ActionTypes []string `json:"actionTypes"`
}

type _ChangeGateTargetInput ChangeGateTargetInput

// NewChangeGateTargetInput instantiates a new ChangeGateTargetInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateTargetInput(actionTypes []string) *ChangeGateTargetInput {
	this := ChangeGateTargetInput{}
	this.ActionTypes = actionTypes
	return &this
}

// NewChangeGateTargetInputWithDefaults instantiates a new ChangeGateTargetInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateTargetInputWithDefaults() *ChangeGateTargetInput {
	this := ChangeGateTargetInput{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *ChangeGateTargetInput) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetInput) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *ChangeGateTargetInput) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *ChangeGateTargetInput) SetEntityType(v string) {
	o.EntityType = &v
}

// GetQualifiedName returns the QualifiedName field value if set, zero value otherwise.
func (o *ChangeGateTargetInput) GetQualifiedName() string {
	if o == nil || IsNil(o.QualifiedName) {
		var ret string
		return ret
	}
	return *o.QualifiedName
}

// GetQualifiedNameOk returns a tuple with the QualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetInput) GetQualifiedNameOk() (*string, bool) {
	if o == nil || IsNil(o.QualifiedName) {
		return nil, false
	}
	return o.QualifiedName, true
}

// HasQualifiedName returns a boolean if a field has been set.
func (o *ChangeGateTargetInput) HasQualifiedName() bool {
	if o != nil && !IsNil(o.QualifiedName) {
		return true
	}

	return false
}

// SetQualifiedName gets a reference to the given string and assigns it to the QualifiedName field.
func (o *ChangeGateTargetInput) SetQualifiedName(v string) {
	o.QualifiedName = &v
}

// GetActionTypes returns the ActionTypes field value
func (o *ChangeGateTargetInput) GetActionTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ActionTypes
}

// GetActionTypesOk returns a tuple with the ActionTypes field value
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetInput) GetActionTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionTypes, true
}

// SetActionTypes sets field value
func (o *ChangeGateTargetInput) SetActionTypes(v []string) {
	o.ActionTypes = v
}

func (o ChangeGateTargetInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateTargetInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.QualifiedName) {
		toSerialize["qualifiedName"] = o.QualifiedName
	}
	toSerialize["actionTypes"] = o.ActionTypes
	return toSerialize, nil
}

func (o *ChangeGateTargetInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeGateTargetInput := _ChangeGateTargetInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeGateTargetInput)

	if err != nil {
		return err
	}

	*o = ChangeGateTargetInput(varChangeGateTargetInput)

	return err
}

type NullableChangeGateTargetInput struct {
	value *ChangeGateTargetInput
	isSet bool
}

func (v NullableChangeGateTargetInput) Get() *ChangeGateTargetInput {
	return v.value
}

func (v *NullableChangeGateTargetInput) Set(val *ChangeGateTargetInput) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateTargetInput) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateTargetInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateTargetInput(val *ChangeGateTargetInput) *NullableChangeGateTargetInput {
	return &NullableChangeGateTargetInput{value: val, isSet: true}
}

func (v NullableChangeGateTargetInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateTargetInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


