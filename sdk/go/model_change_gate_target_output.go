// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeGateTargetOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeGateTargetOutput{}

// ChangeGateTargetOutput struct for ChangeGateTargetOutput
type ChangeGateTargetOutput struct {
	// The type of entity this gate applies to
	EntityType *string `json:"entityType,omitempty"`
	// The qualified name of the change gate, i.e. \"my-project/production\" for an environment
	QualifiedName *string `json:"qualifiedName,omitempty"`
	// The action types this gate targets
	ActionTypes []string `json:"actionTypes"`
	EntityInfo *TargetEntity `json:"entityInfo,omitempty"`
}

type _ChangeGateTargetOutput ChangeGateTargetOutput

// NewChangeGateTargetOutput instantiates a new ChangeGateTargetOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeGateTargetOutput(actionTypes []string) *ChangeGateTargetOutput {
	this := ChangeGateTargetOutput{}
	this.ActionTypes = actionTypes
	return &this
}

// NewChangeGateTargetOutputWithDefaults instantiates a new ChangeGateTargetOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeGateTargetOutputWithDefaults() *ChangeGateTargetOutput {
	this := ChangeGateTargetOutput{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *ChangeGateTargetOutput) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetOutput) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *ChangeGateTargetOutput) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *ChangeGateTargetOutput) SetEntityType(v string) {
	o.EntityType = &v
}

// GetQualifiedName returns the QualifiedName field value if set, zero value otherwise.
func (o *ChangeGateTargetOutput) GetQualifiedName() string {
	if o == nil || IsNil(o.QualifiedName) {
		var ret string
		return ret
	}
	return *o.QualifiedName
}

// GetQualifiedNameOk returns a tuple with the QualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetOutput) GetQualifiedNameOk() (*string, bool) {
	if o == nil || IsNil(o.QualifiedName) {
		return nil, false
	}
	return o.QualifiedName, true
}

// HasQualifiedName returns a boolean if a field has been set.
func (o *ChangeGateTargetOutput) HasQualifiedName() bool {
	if o != nil && !IsNil(o.QualifiedName) {
		return true
	}

	return false
}

// SetQualifiedName gets a reference to the given string and assigns it to the QualifiedName field.
func (o *ChangeGateTargetOutput) SetQualifiedName(v string) {
	o.QualifiedName = &v
}

// GetActionTypes returns the ActionTypes field value
func (o *ChangeGateTargetOutput) GetActionTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ActionTypes
}

// GetActionTypesOk returns a tuple with the ActionTypes field value
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetOutput) GetActionTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionTypes, true
}

// SetActionTypes sets field value
func (o *ChangeGateTargetOutput) SetActionTypes(v []string) {
	o.ActionTypes = v
}

// GetEntityInfo returns the EntityInfo field value if set, zero value otherwise.
func (o *ChangeGateTargetOutput) GetEntityInfo() TargetEntity {
	if o == nil || IsNil(o.EntityInfo) {
		var ret TargetEntity
		return ret
	}
	return *o.EntityInfo
}

// GetEntityInfoOk returns a tuple with the EntityInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeGateTargetOutput) GetEntityInfoOk() (*TargetEntity, bool) {
	if o == nil || IsNil(o.EntityInfo) {
		return nil, false
	}
	return o.EntityInfo, true
}

// HasEntityInfo returns a boolean if a field has been set.
func (o *ChangeGateTargetOutput) HasEntityInfo() bool {
	if o != nil && !IsNil(o.EntityInfo) {
		return true
	}

	return false
}

// SetEntityInfo gets a reference to the given TargetEntity and assigns it to the EntityInfo field.
func (o *ChangeGateTargetOutput) SetEntityInfo(v TargetEntity) {
	o.EntityInfo = &v
}

func (o ChangeGateTargetOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeGateTargetOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.QualifiedName) {
		toSerialize["qualifiedName"] = o.QualifiedName
	}
	toSerialize["actionTypes"] = o.ActionTypes
	if !IsNil(o.EntityInfo) {
		toSerialize["entityInfo"] = o.EntityInfo
	}
	return toSerialize, nil
}

func (o *ChangeGateTargetOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeGateTargetOutput := _ChangeGateTargetOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeGateTargetOutput)

	if err != nil {
		return err
	}

	*o = ChangeGateTargetOutput(varChangeGateTargetOutput)

	return err
}

type NullableChangeGateTargetOutput struct {
	value *ChangeGateTargetOutput
	isSet bool
}

func (v NullableChangeGateTargetOutput) Get() *ChangeGateTargetOutput {
	return v.value
}

func (v *NullableChangeGateTargetOutput) Set(val *ChangeGateTargetOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeGateTargetOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeGateTargetOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeGateTargetOutput(val *ChangeGateTargetOutput) *NullableChangeGateTargetOutput {
	return &NullableChangeGateTargetOutput{value: val, isSet: true}
}

func (v NullableChangeGateTargetOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeGateTargetOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


