// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeRequestApplyResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeRequestApplyResult{}

// ChangeRequestApplyResult struct for ChangeRequestApplyResult
type ChangeRequestApplyResult struct {
	// API endpoint for fetching the updated entity
	EntityUrl string `json:"entityUrl"`
	// Optional details about the apply operation
	Message *string `json:"message,omitempty"`
}

type _ChangeRequestApplyResult ChangeRequestApplyResult

// NewChangeRequestApplyResult instantiates a new ChangeRequestApplyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeRequestApplyResult(entityUrl string) *ChangeRequestApplyResult {
	this := ChangeRequestApplyResult{}
	this.EntityUrl = entityUrl
	return &this
}

// NewChangeRequestApplyResultWithDefaults instantiates a new ChangeRequestApplyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeRequestApplyResultWithDefaults() *ChangeRequestApplyResult {
	this := ChangeRequestApplyResult{}
	return &this
}

// GetEntityUrl returns the EntityUrl field value
func (o *ChangeRequestApplyResult) GetEntityUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityUrl
}

// GetEntityUrlOk returns a tuple with the EntityUrl field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestApplyResult) GetEntityUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityUrl, true
}

// SetEntityUrl sets field value
func (o *ChangeRequestApplyResult) SetEntityUrl(v string) {
	o.EntityUrl = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ChangeRequestApplyResult) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRequestApplyResult) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ChangeRequestApplyResult) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ChangeRequestApplyResult) SetMessage(v string) {
	o.Message = &v
}

func (o ChangeRequestApplyResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeRequestApplyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityUrl"] = o.EntityUrl
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

func (o *ChangeRequestApplyResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeRequestApplyResult := _ChangeRequestApplyResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeRequestApplyResult)

	if err != nil {
		return err
	}

	*o = ChangeRequestApplyResult(varChangeRequestApplyResult)

	return err
}

type NullableChangeRequestApplyResult struct {
	value *ChangeRequestApplyResult
	isSet bool
}

func (v NullableChangeRequestApplyResult) Get() *ChangeRequestApplyResult {
	return v.value
}

func (v *NullableChangeRequestApplyResult) Set(val *ChangeRequestApplyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeRequestApplyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeRequestApplyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeRequestApplyResult(val *ChangeRequestApplyResult) *NullableChangeRequestApplyResult {
	return &NullableChangeRequestApplyResult{value: val, isSet: true}
}

func (v NullableChangeRequestApplyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeRequestApplyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


