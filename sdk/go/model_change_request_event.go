// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ChangeRequestEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeRequestEvent{}

// ChangeRequestEvent struct for ChangeRequestEvent
type ChangeRequestEvent struct {
	// The event ID
	Id string `json:"id"`
	// ID of event that replaces this one (for event updates)
	ReplacedBy *string `json:"replacedBy,omitempty"`
	// The change request this event belongs to
	ChangeRequestId string `json:"changeRequestId"`
	// The revision number this event relates to (if applicable)
	RevisionNumber *int64 `json:"revisionNumber,omitempty"`
	CreatedBy UserInfo `json:"createdBy"`
	// When this event occurred
	CreatedAt time.Time `json:"createdAt"`
	// Optional comment associated with this event
	Comment *string `json:"comment,omitempty"`
	// The type of event
	EventType *string `json:"eventType,omitempty"`
}

type _ChangeRequestEvent ChangeRequestEvent

// NewChangeRequestEvent instantiates a new ChangeRequestEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeRequestEvent(id string, changeRequestId string, createdBy UserInfo, createdAt time.Time) *ChangeRequestEvent {
	this := ChangeRequestEvent{}
	this.Id = id
	this.ChangeRequestId = changeRequestId
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewChangeRequestEventWithDefaults instantiates a new ChangeRequestEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeRequestEventWithDefaults() *ChangeRequestEvent {
	this := ChangeRequestEvent{}
	return &this
}

// GetId returns the Id field value
func (o *ChangeRequestEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChangeRequestEvent) SetId(v string) {
	o.Id = v
}

// GetReplacedBy returns the ReplacedBy field value if set, zero value otherwise.
func (o *ChangeRequestEvent) GetReplacedBy() string {
	if o == nil || IsNil(o.ReplacedBy) {
		var ret string
		return ret
	}
	return *o.ReplacedBy
}

// GetReplacedByOk returns a tuple with the ReplacedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetReplacedByOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacedBy) {
		return nil, false
	}
	return o.ReplacedBy, true
}

// HasReplacedBy returns a boolean if a field has been set.
func (o *ChangeRequestEvent) HasReplacedBy() bool {
	if o != nil && !IsNil(o.ReplacedBy) {
		return true
	}

	return false
}

// SetReplacedBy gets a reference to the given string and assigns it to the ReplacedBy field.
func (o *ChangeRequestEvent) SetReplacedBy(v string) {
	o.ReplacedBy = &v
}

// GetChangeRequestId returns the ChangeRequestId field value
func (o *ChangeRequestEvent) GetChangeRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeRequestId
}

// GetChangeRequestIdOk returns a tuple with the ChangeRequestId field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetChangeRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeRequestId, true
}

// SetChangeRequestId sets field value
func (o *ChangeRequestEvent) SetChangeRequestId(v string) {
	o.ChangeRequestId = v
}

// GetRevisionNumber returns the RevisionNumber field value if set, zero value otherwise.
func (o *ChangeRequestEvent) GetRevisionNumber() int64 {
	if o == nil || IsNil(o.RevisionNumber) {
		var ret int64
		return ret
	}
	return *o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetRevisionNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.RevisionNumber) {
		return nil, false
	}
	return o.RevisionNumber, true
}

// HasRevisionNumber returns a boolean if a field has been set.
func (o *ChangeRequestEvent) HasRevisionNumber() bool {
	if o != nil && !IsNil(o.RevisionNumber) {
		return true
	}

	return false
}

// SetRevisionNumber gets a reference to the given int64 and assigns it to the RevisionNumber field.
func (o *ChangeRequestEvent) SetRevisionNumber(v int64) {
	o.RevisionNumber = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *ChangeRequestEvent) GetCreatedBy() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetCreatedByOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *ChangeRequestEvent) SetCreatedBy(v UserInfo) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ChangeRequestEvent) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ChangeRequestEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ChangeRequestEvent) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ChangeRequestEvent) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ChangeRequestEvent) SetComment(v string) {
	o.Comment = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ChangeRequestEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRequestEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ChangeRequestEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ChangeRequestEvent) SetEventType(v string) {
	o.EventType = &v
}

func (o ChangeRequestEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeRequestEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ReplacedBy) {
		toSerialize["replacedBy"] = o.ReplacedBy
	}
	toSerialize["changeRequestId"] = o.ChangeRequestId
	if !IsNil(o.RevisionNumber) {
		toSerialize["revisionNumber"] = o.RevisionNumber
	}
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	return toSerialize, nil
}

func (o *ChangeRequestEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"changeRequestId",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeRequestEvent := _ChangeRequestEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeRequestEvent)

	if err != nil {
		return err
	}

	*o = ChangeRequestEvent(varChangeRequestEvent)

	return err
}

type NullableChangeRequestEvent struct {
	value *ChangeRequestEvent
	isSet bool
}

func (v NullableChangeRequestEvent) Get() *ChangeRequestEvent {
	return v.value
}

func (v *NullableChangeRequestEvent) Set(val *ChangeRequestEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeRequestEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeRequestEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeRequestEvent(val *ChangeRequestEvent) *NullableChangeRequestEvent {
	return &NullableChangeRequestEvent{value: val, isSet: true}
}

func (v NullableChangeRequestEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeRequestEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


