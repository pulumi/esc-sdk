// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeRequestGateEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeRequestGateEvaluation{}

// ChangeRequestGateEvaluation struct for ChangeRequestGateEvaluation
type ChangeRequestGateEvaluation struct {
	// Indicates if all applicable gates are satisfied and the change request is ready for application
	Satisfied bool `json:"satisfied"`
	// Lists all gates that apply to this change request
	ApplicableGates []ChangeGateEvaluation `json:"applicableGates"`
}

type _ChangeRequestGateEvaluation ChangeRequestGateEvaluation

// NewChangeRequestGateEvaluation instantiates a new ChangeRequestGateEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeRequestGateEvaluation(satisfied bool, applicableGates []ChangeGateEvaluation) *ChangeRequestGateEvaluation {
	this := ChangeRequestGateEvaluation{}
	this.Satisfied = satisfied
	this.ApplicableGates = applicableGates
	return &this
}

// NewChangeRequestGateEvaluationWithDefaults instantiates a new ChangeRequestGateEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeRequestGateEvaluationWithDefaults() *ChangeRequestGateEvaluation {
	this := ChangeRequestGateEvaluation{}
	return &this
}

// GetSatisfied returns the Satisfied field value
func (o *ChangeRequestGateEvaluation) GetSatisfied() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Satisfied
}

// GetSatisfiedOk returns a tuple with the Satisfied field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestGateEvaluation) GetSatisfiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Satisfied, true
}

// SetSatisfied sets field value
func (o *ChangeRequestGateEvaluation) SetSatisfied(v bool) {
	o.Satisfied = v
}

// GetApplicableGates returns the ApplicableGates field value
func (o *ChangeRequestGateEvaluation) GetApplicableGates() []ChangeGateEvaluation {
	if o == nil {
		var ret []ChangeGateEvaluation
		return ret
	}

	return o.ApplicableGates
}

// GetApplicableGatesOk returns a tuple with the ApplicableGates field value
// and a boolean to check if the value has been set.
func (o *ChangeRequestGateEvaluation) GetApplicableGatesOk() ([]ChangeGateEvaluation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicableGates, true
}

// SetApplicableGates sets field value
func (o *ChangeRequestGateEvaluation) SetApplicableGates(v []ChangeGateEvaluation) {
	o.ApplicableGates = v
}

func (o ChangeRequestGateEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeRequestGateEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["satisfied"] = o.Satisfied
	toSerialize["applicableGates"] = o.ApplicableGates
	return toSerialize, nil
}

func (o *ChangeRequestGateEvaluation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"satisfied",
		"applicableGates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeRequestGateEvaluation := _ChangeRequestGateEvaluation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varChangeRequestGateEvaluation)

	if err != nil {
		return err
	}

	*o = ChangeRequestGateEvaluation(varChangeRequestGateEvaluation)

	return err
}

type NullableChangeRequestGateEvaluation struct {
	value *ChangeRequestGateEvaluation
	isSet bool
}

func (v NullableChangeRequestGateEvaluation) Get() *ChangeRequestGateEvaluation {
	return v.value
}

func (v *NullableChangeRequestGateEvaluation) Set(val *ChangeRequestGateEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeRequestGateEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeRequestGateEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeRequestGateEvaluation(val *ChangeRequestGateEvaluation) *NullableChangeRequestGateEvaluation {
	return &NullableChangeRequestGateEvaluation{value: val, isSet: true}
}

func (v NullableChangeRequestGateEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeRequestGateEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


