// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnvironmentTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentTag{}

// EnvironmentTag struct for EnvironmentTag
type EnvironmentTag struct {
	Name string `json:"name"`
	Value *string `json:"value,omitempty"`
	Created string `json:"created"`
	Modified string `json:"modified"`
	EditorLogin string `json:"editorLogin"`
	EditorName string `json:"editorName"`
}

type _EnvironmentTag EnvironmentTag

// NewEnvironmentTag instantiates a new EnvironmentTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentTag(name string, created string, modified string, editorLogin string, editorName string) *EnvironmentTag {
	this := EnvironmentTag{}
	this.Name = name
	this.Created = created
	this.Modified = modified
	this.EditorLogin = editorLogin
	this.EditorName = editorName
	return &this
}

// NewEnvironmentTagWithDefaults instantiates a new EnvironmentTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentTagWithDefaults() *EnvironmentTag {
	this := EnvironmentTag{}
	return &this
}

// GetName returns the Name field value
func (o *EnvironmentTag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentTag) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnvironmentTag) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnvironmentTag) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EnvironmentTag) SetValue(v string) {
	o.Value = &v
}

// GetCreated returns the Created field value
func (o *EnvironmentTag) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *EnvironmentTag) SetCreated(v string) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *EnvironmentTag) GetModified() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *EnvironmentTag) SetModified(v string) {
	o.Modified = v
}

// GetEditorLogin returns the EditorLogin field value
func (o *EnvironmentTag) GetEditorLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EditorLogin
}

// GetEditorLoginOk returns a tuple with the EditorLogin field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetEditorLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EditorLogin, true
}

// SetEditorLogin sets field value
func (o *EnvironmentTag) SetEditorLogin(v string) {
	o.EditorLogin = v
}

// GetEditorName returns the EditorName field value
func (o *EnvironmentTag) GetEditorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EditorName
}

// GetEditorNameOk returns a tuple with the EditorName field value
// and a boolean to check if the value has been set.
func (o *EnvironmentTag) GetEditorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EditorName, true
}

// SetEditorName sets field value
func (o *EnvironmentTag) SetEditorName(v string) {
	o.EditorName = v
}

func (o EnvironmentTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["created"] = o.Created
	toSerialize["modified"] = o.Modified
	toSerialize["editorLogin"] = o.EditorLogin
	toSerialize["editorName"] = o.EditorName
	return toSerialize, nil
}

func (o *EnvironmentTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"created",
		"modified",
		"editorLogin",
		"editorName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentTag := _EnvironmentTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to be lenient with API responses that may include extra fields
	err = decoder.Decode(&varEnvironmentTag)

	if err != nil {
		return err
	}

	*o = EnvironmentTag(varEnvironmentTag)

	return err
}

type NullableEnvironmentTag struct {
	value *EnvironmentTag
	isSet bool
}

func (v NullableEnvironmentTag) Get() *EnvironmentTag {
	return v.value
}

func (v *NullableEnvironmentTag) Set(val *EnvironmentTag) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentTag) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentTag(val *EnvironmentTag) *NullableEnvironmentTag {
	return &NullableEnvironmentTag{value: val, isSet: true}
}

func (v NullableEnvironmentTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


