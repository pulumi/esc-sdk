// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the Interpolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interpolation{}

// Interpolation struct for Interpolation
type Interpolation struct {
	Text *string `json:"text,omitempty"`
	Value []PropertyAccessor `json:"value,omitempty"`
}

// NewInterpolation instantiates a new Interpolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterpolation() *Interpolation {
	this := Interpolation{}
	return &this
}

// NewInterpolationWithDefaults instantiates a new Interpolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterpolationWithDefaults() *Interpolation {
	this := Interpolation{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Interpolation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpolation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Interpolation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Interpolation) SetText(v string) {
	o.Text = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Interpolation) GetValue() []PropertyAccessor {
	if o == nil || IsNil(o.Value) {
		var ret []PropertyAccessor
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interpolation) GetValueOk() ([]PropertyAccessor, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Interpolation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []PropertyAccessor and assigns it to the Value field.
func (o *Interpolation) SetValue(v []PropertyAccessor) {
	o.Value = v
}

func (o Interpolation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interpolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableInterpolation struct {
	value *Interpolation
	isSet bool
}

func (v NullableInterpolation) Get() *Interpolation {
	return v.value
}

func (v *NullableInterpolation) Set(val *Interpolation) {
	v.value = val
	v.isSet = true
}

func (v NullableInterpolation) IsSet() bool {
	return v.isSet
}

func (v *NullableInterpolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterpolation(val *Interpolation) *NullableInterpolation {
	return &NullableInterpolation{value: val, isSet: true}
}

func (v NullableInterpolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterpolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


