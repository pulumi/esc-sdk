// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the TargetEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetEntity{}

// TargetEntity struct for TargetEntity
type TargetEntity struct {
	EntityType *string `json:"entityType,omitempty"`
}

// NewTargetEntity instantiates a new TargetEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetEntity() *TargetEntity {
	this := TargetEntity{}
	return &this
}

// NewTargetEntityWithDefaults instantiates a new TargetEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetEntityWithDefaults() *TargetEntity {
	this := TargetEntity{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *TargetEntity) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *TargetEntity) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *TargetEntity) SetEntityType(v string) {
	o.EntityType = &v
}

func (o TargetEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	return toSerialize, nil
}

type NullableTargetEntity struct {
	value *TargetEntity
	isSet bool
}

func (v NullableTargetEntity) Get() *TargetEntity {
	return v.value
}

func (v *NullableTargetEntity) Set(val *TargetEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetEntity(val *TargetEntity) *NullableTargetEntity {
	return &NullableTargetEntity{value: val, isSet: true}
}

func (v NullableTargetEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


